{"ast":null,"code":"var _jsxFileName = \"/var/www/1001guide.net/backend/resources/backend/src/components/forms/LanguagePicker.js\";\nimport React, { useState, useEffect } from 'react';\nimport { sendRequest } from '../../helpers/client-server';\n\nconst LanguagePicker = ({\n  currentLanguage,\n  languageUpdate,\n  setErrorText,\n  match,\n  label = \"Выберите язык редактирования\"\n}) => {\n  // languages list\n  const [languageList, setLanguageList] = useState([]); // get list of languages\n\n  useEffect(() => {\n    sendRequest('languages/codes').then(response => {\n      if (!response.data.items) {\n        setErrorText(\"Can't get language list\");\n        return false;\n      }\n\n      setLanguageList(response.data.items);\n    }).catch(error => {\n      setErrorText(error.toString());\n    });\n  }, []);\n  const selectOptions = languageList.map((option, key) => {\n    return React.createElement(\"option\", {\n      value: option,\n      key: key,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, option);\n  }); // on lang change\n\n  const handleChange = e => {\n    languageUpdate(e.target.value);\n  }; // build select\n\n\n  return React.createElement(\"div\", {\n    className: \"card mb-5 mt-3 bg-light\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"card-header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, label), React.createElement(\"div\", {\n    className: \"card-body\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, React.createElement(\"select\", {\n    name: \"language\",\n    id: \"languages\",\n    className: \"form-control\",\n    value: currentLanguage,\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, selectOptions)));\n};\n\nexport default LanguagePicker;","map":{"version":3,"sources":["/var/www/1001guide.net/backend/resources/backend/src/components/forms/LanguagePicker.js"],"names":["React","useState","useEffect","sendRequest","LanguagePicker","currentLanguage","languageUpdate","setErrorText","match","label","languageList","setLanguageList","then","response","data","items","catch","error","toString","selectOptions","map","option","key","handleChange","e","target","value"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,SAAQC,WAAR,QAA0B,6BAA1B;;AAEA,MAAMC,cAAc,GAAG,CAAC;AAACC,EAAAA,eAAD;AAAkBC,EAAAA,cAAlB;AAAkCC,EAAAA,YAAlC;AAAgDC,EAAAA,KAAhD;AAAuDC,EAAAA,KAAK,GAAC;AAA7D,CAAD,KAAkG;AAEvH;AACA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCV,QAAQ,CAAC,EAAD,CAAhD,CAHuH,CAKvH;;AACAC,EAAAA,SAAS,CAAC,MAAM;AAEdC,IAAAA,WAAW,CAAC,iBAAD,CAAX,CACGS,IADH,CACQC,QAAQ,IAAI;AAChB,UAAK,CAACA,QAAQ,CAACC,IAAT,CAAcC,KAApB,EAA4B;AAC1BR,QAAAA,YAAY,CAAC,yBAAD,CAAZ;AACA,eAAO,KAAP;AACD;;AACDI,MAAAA,eAAe,CAACE,QAAQ,CAACC,IAAT,CAAcC,KAAf,CAAf;AACD,KAPH,EAQGC,KARH,CAQSC,KAAK,IAAI;AACdV,MAAAA,YAAY,CAACU,KAAK,CAACC,QAAN,EAAD,CAAZ;AACD,KAVH;AAWD,GAbQ,EAaN,EAbM,CAAT;AAeA,QAAMC,aAAa,GAAGT,YAAY,CAACU,GAAb,CAAiB,CAACC,MAAD,EAASC,GAAT,KAAiB;AACtD,WACE;AAAQ,MAAA,KAAK,EAAED,MAAf;AAAuB,MAAA,GAAG,EAAEC,GAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAkCD,MAAlC,CADF;AAGD,GAJqB,CAAtB,CArBuH,CA2BvH;;AACA,QAAME,YAAY,GAAGC,CAAC,IAAI;AACxBlB,IAAAA,cAAc,CAACkB,CAAC,CAACC,MAAF,CAASC,KAAV,CAAd;AACD,GAFD,CA5BuH,CAgCvH;;;AACA,SACE;AAAK,IAAA,SAAS,EAAC,yBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGjB,KADH,CADF,EAIE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAQ,IAAA,IAAI,EAAC,UAAb;AAAwB,IAAA,EAAE,EAAC,WAA3B;AAAuC,IAAA,SAAS,EAAC,cAAjD;AAAgE,IAAA,KAAK,EAAEJ,eAAvE;AAAwF,IAAA,QAAQ,EAAEkB,YAAlG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGJ,aADH,CADF,CAJF,CADF;AAaD,CA9CD;;AAgDA,eAAef,cAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport {sendRequest} from '../../helpers/client-server';\r\n\r\nconst LanguagePicker = ({currentLanguage, languageUpdate, setErrorText, match, label=\"Выберите язык редактирования\"}) => {\r\n\r\n  // languages list\r\n  const [languageList, setLanguageList] = useState([]);\r\n\r\n  // get list of languages\r\n  useEffect(() => {\r\n\r\n    sendRequest('languages/codes')\r\n      .then(response => {\r\n        if ( !response.data.items ) {\r\n          setErrorText(\"Can't get language list\");\r\n          return false;\r\n        }\r\n        setLanguageList(response.data.items);\r\n      })\r\n      .catch(error => {\r\n        setErrorText(error.toString());\r\n      });\r\n  }, []);\r\n\r\n  const selectOptions = languageList.map((option, key) => {\r\n    return (\r\n      <option value={option} key={key}>{option}</option>\r\n    );\r\n  });\r\n\r\n  // on lang change\r\n  const handleChange = e => {\r\n    languageUpdate(e.target.value);\r\n  };\r\n\r\n  // build select\r\n  return (\r\n    <div className=\"card mb-5 mt-3 bg-light\">\r\n      <div className=\"card-header\">\r\n        {label}\r\n      </div>\r\n      <div className=\"card-body\">\r\n        <select name=\"language\" id=\"languages\" className=\"form-control\" value={currentLanguage} onChange={handleChange}>\r\n          {selectOptions}\r\n        </select>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n};\r\n\r\nexport default LanguagePicker;"]},"metadata":{},"sourceType":"module"}