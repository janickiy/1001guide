{"ast":null,"code":"var _jsxFileName = \"/var/www/1001guide.net/backend/resources/backend/src/components/forms/FormEdit.js\";\nimport React, { useState, useEffect } from 'react';\nimport FormInput from './FormInput';\nimport FormTextarea from './FormTextarea';\nimport FormEditor from './FormEditor';\nimport FormCheckbox from './FormCheckbox';\nimport FormSelect from './FormSelect';\nimport FormHidden from './FormHidden';\nimport FormImage from './FormImage';\nimport ButtonSave from './ButtonSave';\nimport LanguagePicker from './LanguagePicker';\nimport ErrorBlock from '../ErrorBlock';\nimport MessageBlock from '../MessageBlock';\nimport BackButton from '../includes/BackButton';\nimport { sendRequest } from \"../../helpers/client-server\";\nimport { Redirect } from 'react-router-dom';\nimport { getFieldType } from '../../helpers/forms';\nimport { adminUrl } from \"../../config\";\n\nconst FormEdit = ({\n  fieldsToShow,\n  itemType,\n  itemId = null,\n  multilang = false,\n  extraParams = null\n}) => {\n  const [fields, setFields] = useState(fieldsToShow);\n  const initValues = fieldsToShow.reduce((obj, item) => {\n    obj[item.name] = item.hasOwnProperty(\"variants\") ? item.variants[0].name : \"\";\n    return obj;\n  }, {}); // input values\n\n  const [values, setValues] = useState(initValues); // changed fields\n\n  const [changedFields, setChangedFields] = useState({\n    changed: {},\n    initial: {},\n    isLoaded: false\n  }); // errors\n\n  const [errorText, setErrorText] = useState(null);\n  const [messageText, setMessageText] = useState(null); // loading\n\n  const [isLoading, setIsLoading] = useState(false); // language\n\n  const [language, setLanguage] = useState(window.localStorage.getItem(\"picked_lang\") || \"en\"); // redirect\n\n  const [redirect, setRedirect] = useState(null); // get field type if exists\n\n  useEffect(() => {\n    if (!extraParams || !extraParams.hasOwnProperty('group_id')) return;\n    getFieldType(extraParams['group_id']).then(fieldType => {\n      if (!fieldType) return;\n      setFields(fields => {\n        return fields.reduce((acc, field) => {\n          let addingField = field.name === \"content\" ? { ...field,\n            type: fieldType\n          } : field;\n          acc.push(addingField);\n          return acc;\n        }, []);\n      });\n    });\n  }, []); // get initial data from server\n\n  useEffect(() => {\n    if (!itemId) return; // loading...\n\n    setIsLoading(true); // make request properties\n    // send request\n\n    sendRequest(`${itemType}/${itemId}?lang=${language}`, 'get', {\n      lang: language\n    }).then(response => {\n      // if object not found\n      if (!response.data.item) {\n        setErrorText(`Object with ID ${itemId} was not found`);\n        return;\n      } // merge field properties\n\n\n      const item = response.data.item;\n      let newValues = Object.assign({}, initValues);\n      Object.keys(item).forEach(key => {\n        if (!newValues.hasOwnProperty(key) || !item[key]) return;\n        newValues[key] = item[key];\n      }); // update form fields\n\n      setValues(newValues);\n      setIsLoading(false);\n      console.log(response);\n    }) // error\n    .catch(error => {\n      setIsLoading(false);\n      setErrorText(error.toString());\n    });\n  }, [language]);\n\n  const resetMessages = () => {\n    setMessageText(null);\n    setErrorText(null);\n  };\n\n  const pickLanguage = lang => {\n    setLanguage(lang);\n    window.localStorage.setItem(\"picked_lang\", lang);\n  }; // make a redirect\n\n\n  const renderRedirect = redirect ? React.createElement(Redirect, {\n    to: redirect,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }) : null; // build a link to \"Edit\" page\n\n  const generateEditLink = itemId => {\n    const urlPart = window.location.href.split(adminUrl);\n    return adminUrl + urlPart[1].replace('/create/', '/' + itemId + '/edit/');\n  };\n\n  const simplySetValue = (name, value) => {\n    return setValues({ ...values,\n      [name]: value\n    });\n  }; // on inputs change\n\n\n  const handleInputChange = e => {\n    const target = e.target;\n    simplySetValue(target.name, target.value);\n  }; // on editor change\n\n\n  const handleEditorChange = (name, value) => {\n    if (isLoading) return;\n    simplySetValue(name, value);\n  }; // on checkbox change\n\n\n  const handleCheckboxChange = e => {\n    const target = e.target;\n    const checked = Number(target.checked);\n    simplySetValue(target.name, checked);\n  }; // on save/update\n\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    setIsLoading(true); // prepare data\n\n    const url = itemType + (itemId ? `/${itemId}` : '');\n    let dataToSend = Object.assign(values, itemId ? {\n      '_method': 'PUT'\n    } : {});\n    if (multilang) dataToSend = Object.assign(dataToSend, {\n      lang: language\n    });\n    if (extraParams) dataToSend = Object.assign(dataToSend, extraParams); // reset messages\n\n    resetMessages(); // send to a server\n\n    sendRequest(url, \"post\", dataToSend).then(response => {\n      setIsLoading(false);\n      console.log('response', response);\n      const data = response.data; // if some required fields are empty\n\n      if (data.hasOwnProperty(\"error\")) {\n        setErrorText(data.error);\n        return false;\n      } // if some required fields are empty\n\n\n      if (data.hasOwnProperty(\"required\")) {\n        setErrorText(\"Обязательные поля не заполнены: \" + data.required.join(', '));\n        return false;\n      } // if it's okay\n      // on save new item\n\n\n      if (!itemId) {\n        console.log('new itemId', itemId);\n\n        if (!data.hasOwnProperty(\"id\")) {\n          return setErrorText(\"Не удалось создать элемент\");\n        }\n\n        const editLink = generateEditLink(data.id);\n        setRedirect(editLink);\n      } // on update existing\n      else {\n          if (data.hasOwnProperty(\"success\")) setMessageText(data.success);\n        }\n    }) // request error\n    .catch(error => {\n      console.log('catch error', error);\n      setIsLoading(false);\n      setErrorText(error.toString());\n    });\n  }; // build form fields from list\n\n\n  const formFields = fields.map((field, key) => {\n    switch (field.type) {\n      // <textarea>\n      case \"textarea\":\n        return React.createElement(FormTextarea, {\n          key: key,\n          name: field.name,\n          label: field.title,\n          value: values[field.name],\n          setValue: handleInputChange,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 257\n          },\n          __self: this\n        });\n      // WYSIWYG\n\n      case \"editor\":\n        return React.createElement(FormEditor, {\n          key: key,\n          name: field.name,\n          label: field.title,\n          value: values[field.name],\n          setValue: handleEditorChange,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 269\n          },\n          __self: this\n        });\n      // <input type=\"checkbox\">\n\n      case \"checkbox\":\n        return React.createElement(FormCheckbox, {\n          key: key,\n          name: field.name,\n          label: field.title,\n          value: values[field.name],\n          setValue: handleCheckboxChange,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 281\n          },\n          __self: this\n        });\n      // <select>\n\n      case \"select\":\n        return React.createElement(FormSelect, {\n          key: key,\n          name: field.name,\n          label: field.title,\n          value: values[field.name],\n          setValue: handleInputChange,\n          variants: field.variants,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 293\n          },\n          __self: this\n        });\n      // input[type=\"hidden\"]\n\n      case \"hidden\":\n        return React.createElement(FormHidden, {\n          key: key,\n          name: field.name,\n          value: values[field.name],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 306\n          },\n          __self: this\n        });\n      // image uploader\n\n      case \"image\":\n        return React.createElement(FormImage, {\n          key: key,\n          name: field.name,\n          value: values[field.name],\n          initImage: values[\"img\"],\n          size: \"197x116\",\n          setValue: simplySetValue,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 316\n          },\n          __self: this\n        });\n\n      case \"none\":\n        break;\n      // input[type=\"text\"]\n\n      default:\n        return React.createElement(FormInput, {\n          key: key,\n          name: field.name,\n          label: field.title,\n          value: values[field.name],\n          setValue: handleInputChange,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 332\n          },\n          __self: this\n        });\n    }\n  }); // if messages show message block\n\n  const messageBlock = () => {\n    const error = errorText ? React.createElement(ErrorBlock, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350\n      },\n      __self: this\n    }, errorText) : null;\n    const message = messageText ? React.createElement(MessageBlock, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351\n      },\n      __self: this\n    }, messageText) : null;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353\n      },\n      __self: this\n    }, error, message);\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 362\n    },\n    __self: this\n  }, renderRedirect, React.createElement(BackButton, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 364\n    },\n    __self: this\n  }), messageBlock(), React.createElement(\"form\", {\n    action: \"/bnd/\",\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 366\n    },\n    __self: this\n  }, multilang ? React.createElement(LanguagePicker, {\n    setErrorText: setErrorText,\n    currentLanguage: language,\n    languageUpdate: pickLanguage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 368\n    },\n    __self: this\n  }) : null, formFields, messageBlock(), React.createElement(ButtonSave, {\n    label: \"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C\",\n    isLoading: isLoading,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 373\n    },\n    __self: this\n  })));\n};\n\nexport default FormEdit;","map":{"version":3,"sources":["/var/www/1001guide.net/backend/resources/backend/src/components/forms/FormEdit.js"],"names":["React","useState","useEffect","FormInput","FormTextarea","FormEditor","FormCheckbox","FormSelect","FormHidden","FormImage","ButtonSave","LanguagePicker","ErrorBlock","MessageBlock","BackButton","sendRequest","Redirect","getFieldType","adminUrl","FormEdit","fieldsToShow","itemType","itemId","multilang","extraParams","fields","setFields","initValues","reduce","obj","item","name","hasOwnProperty","variants","values","setValues","changedFields","setChangedFields","changed","initial","isLoaded","errorText","setErrorText","messageText","setMessageText","isLoading","setIsLoading","language","setLanguage","window","localStorage","getItem","redirect","setRedirect","then","fieldType","acc","field","addingField","type","push","lang","response","data","newValues","Object","assign","keys","forEach","key","console","log","catch","error","toString","resetMessages","pickLanguage","setItem","renderRedirect","generateEditLink","urlPart","location","href","split","replace","simplySetValue","value","handleInputChange","e","target","handleEditorChange","handleCheckboxChange","checked","Number","handleSubmit","preventDefault","url","dataToSend","required","join","editLink","id","success","formFields","map","title","messageBlock","message"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,YAAP,MAAyB,iBAAzB;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,SAAQC,WAAR,QAA0B,6BAA1B;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAAQC,YAAR,QAA2B,qBAA3B;AACA,SAAQC,QAAR,QAAuB,cAAvB;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAACC,EAAAA,YAAD;AAAeC,EAAAA,QAAf;AAAyBC,EAAAA,MAAM,GAAC,IAAhC;AAAsCC,EAAAA,SAAS,GAAC,KAAhD;AAAuDC,EAAAA,WAAW,GAAC;AAAnE,CAAD,KAA8E;AAE7F,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBzB,QAAQ,CAACmB,YAAD,CAApC;AAEA,QAAMO,UAAU,GAAGP,YAAY,CAACQ,MAAb,CAAoB,CAACC,GAAD,EAAMC,IAAN,KAAe;AACpDD,IAAAA,GAAG,CAACC,IAAI,CAACC,IAAN,CAAH,GAAkBD,IAAI,CAACE,cAAL,CAAoB,UAApB,CAAD,GAAoCF,IAAI,CAACG,QAAL,CAAc,CAAd,EAAiBF,IAArD,GAA4D,EAA7E;AACA,WAAOF,GAAP;AACD,GAHkB,EAGhB,EAHgB,CAAnB,CAJ6F,CAS7F;;AACA,QAAM,CAACK,MAAD,EAASC,SAAT,IAAsBlC,QAAQ,CAAE0B,UAAF,CAApC,CAV6F,CAY7F;;AACA,QAAM,CAACS,aAAD,EAAgBC,gBAAhB,IAAoCpC,QAAQ,CAAC;AAAEqC,IAAAA,OAAO,EAAE,EAAX;AAAeC,IAAAA,OAAO,EAAE,EAAxB;AAA4BC,IAAAA,QAAQ,EAAE;AAAtC,GAAD,CAAlD,CAb6F,CAe7F;;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BzC,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAAC0C,WAAD,EAAcC,cAAd,IAAgC3C,QAAQ,CAAC,IAAD,CAA9C,CAjB6F,CAmB7F;;AACA,QAAM,CAAC4C,SAAD,EAAYC,YAAZ,IAA4B7C,QAAQ,CAAC,KAAD,CAA1C,CApB6F,CAsB7F;;AACA,QAAM,CAAC8C,QAAD,EAAWC,WAAX,IAA0B/C,QAAQ,CACtCgD,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,aAA5B,KAA8C,IADR,CAAxC,CAvB6F,CA2B7F;;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BpD,QAAQ,CAAC,IAAD,CAAxC,CA5B6F,CA+B7F;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAK,CAACsB,WAAD,IAAgB,CAACA,WAAW,CAACQ,cAAZ,CAA2B,UAA3B,CAAtB,EACE;AAEFf,IAAAA,YAAY,CAACO,WAAW,CAAC,UAAD,CAAZ,CAAZ,CACC8B,IADD,CACMC,SAAS,IAAI;AAEjB,UAAK,CAACA,SAAN,EACE;AAEF7B,MAAAA,SAAS,CAACD,MAAM,IAAI;AAClB,eAAOA,MAAM,CAACG,MAAP,CAAe,CAAC4B,GAAD,EAAMC,KAAN,KAAgB;AACpC,cAAIC,WAAW,GAAKD,KAAK,CAAC1B,IAAN,KAAe,SAAjB,GAChB,EAAC,GAAG0B,KAAJ;AAAWE,YAAAA,IAAI,EAAEJ;AAAjB,WADgB,GAEhBE,KAFF;AAGAD,UAAAA,GAAG,CAACI,IAAJ,CAASF,WAAT;AACA,iBAAOF,GAAP;AACD,SANM,EAMJ,EANI,CAAP;AAOD,OARQ,CAAT;AAUD,KAhBD;AAkBD,GAtBQ,EAsBN,EAtBM,CAAT,CAhC6F,CAyD7F;;AACAtD,EAAAA,SAAS,CAAC,MAAM;AAEd,QAAK,CAACoB,MAAN,EACE,OAHY,CAKd;;AACAwB,IAAAA,YAAY,CAAC,IAAD,CAAZ,CANc,CAQd;AAEA;;AACA/B,IAAAA,WAAW,CAAE,GAAEM,QAAS,IAAGC,MAAO,SAAQyB,QAAS,EAAxC,EAA2C,KAA3C,EAAkD;AAACc,MAAAA,IAAI,EAAEd;AAAP,KAAlD,CAAX,CACGO,IADH,CACQQ,QAAQ,IAAI;AAEhB;AACA,UAAK,CAACA,QAAQ,CAACC,IAAT,CAAcjC,IAApB,EAA2B;AACzBY,QAAAA,YAAY,CAAE,kBAAiBpB,MAAO,gBAA1B,CAAZ;AACA;AACD,OANe,CAQhB;;;AACA,YAAMQ,IAAI,GAAGgC,QAAQ,CAACC,IAAT,CAAcjC,IAA3B;AACA,UAAIkC,SAAS,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBvC,UAAlB,CAAhB;AACAsC,MAAAA,MAAM,CAACE,IAAP,CAAYrC,IAAZ,EAAkBsC,OAAlB,CAA0BC,GAAG,IAAI;AAC/B,YAAK,CAACL,SAAS,CAAChC,cAAV,CAAyBqC,GAAzB,CAAD,IAAkC,CAACvC,IAAI,CAACuC,GAAD,CAA5C,EACE;AACFL,QAAAA,SAAS,CAACK,GAAD,CAAT,GAAiBvC,IAAI,CAACuC,GAAD,CAArB;AACD,OAJD,EAXgB,CAiBhB;;AACAlC,MAAAA,SAAS,CAAC6B,SAAD,CAAT;AACAlB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AAEAwB,MAAAA,OAAO,CAACC,GAAR,CAAYT,QAAZ;AAED,KAxBH,EAyBE;AAzBF,KA0BGU,KA1BH,CA0BSC,KAAK,IAAI;AACd3B,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAJ,MAAAA,YAAY,CAAC+B,KAAK,CAACC,QAAN,EAAD,CAAZ;AACD,KA7BH;AAiCD,GA5CQ,EA4CN,CAAC3B,QAAD,CA5CM,CAAT;;AA+CA,QAAM4B,aAAa,GAAG,MAAM;AAC1B/B,IAAAA,cAAc,CAAC,IAAD,CAAd;AACAF,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,GAHD;;AAMA,QAAMkC,YAAY,GAAGf,IAAI,IAAI;AAC3Bb,IAAAA,WAAW,CAACa,IAAD,CAAX;AACAZ,IAAAA,MAAM,CAACC,YAAP,CAAoB2B,OAApB,CAA4B,aAA5B,EAA2ChB,IAA3C;AACD,GAHD,CA/G6F,CAqH7F;;;AACA,QAAMiB,cAAc,GAAG1B,QAAQ,GAC5B,oBAAC,QAAD;AAAU,IAAA,EAAE,EAAEA,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAD4B,GAE7B,IAFF,CAtH6F,CA0H7F;;AACA,QAAM2B,gBAAgB,GAAGzD,MAAM,IAAI;AACjC,UAAM0D,OAAO,GAAG/B,MAAM,CAACgC,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2BjE,QAA3B,CAAhB;AACA,WAAOA,QAAQ,GAAG8D,OAAO,CAAC,CAAD,CAAP,CAAWI,OAAX,CAAmB,UAAnB,EAA+B,MAAI9D,MAAJ,GAAW,QAA1C,CAAlB;AACD,GAHD;;AAMA,QAAM+D,cAAc,GAAG,CAACtD,IAAD,EAAOuD,KAAP,KAAiB;AACtC,WAAOnD,SAAS,CAAC,EACf,GAAGD,MADY;AAEf,OAACH,IAAD,GAAQuD;AAFO,KAAD,CAAhB;AAID,GALD,CAjI6F,CAwI7F;;;AACA,QAAMC,iBAAiB,GAAGC,CAAC,IAAI;AAC7B,UAAMC,MAAM,GAAGD,CAAC,CAACC,MAAjB;AACAJ,IAAAA,cAAc,CAACI,MAAM,CAAC1D,IAAR,EAAc0D,MAAM,CAACH,KAArB,CAAd;AACD,GAHD,CAzI6F,CA8I7F;;;AACA,QAAMI,kBAAkB,GAAG,CAAC3D,IAAD,EAAOuD,KAAP,KAAiB;AAC1C,QAAKzC,SAAL,EACE;AACFwC,IAAAA,cAAc,CAACtD,IAAD,EAAOuD,KAAP,CAAd;AACD,GAJD,CA/I6F,CAqJ7F;;;AACA,QAAMK,oBAAoB,GAAGH,CAAC,IAAI;AAChC,UAAMC,MAAM,GAAGD,CAAC,CAACC,MAAjB;AACA,UAAMG,OAAO,GAAGC,MAAM,CAACJ,MAAM,CAACG,OAAR,CAAtB;AACAP,IAAAA,cAAc,CAACI,MAAM,CAAC1D,IAAR,EAAc6D,OAAd,CAAd;AACD,GAJD,CAtJ6F,CA6J7F;;;AACA,QAAME,YAAY,GAAGN,CAAC,IAAI;AACxBA,IAAAA,CAAC,CAACO,cAAF;AAEAjD,IAAAA,YAAY,CAAC,IAAD,CAAZ,CAHwB,CAKxB;;AACA,UAAMkD,GAAG,GAAG3E,QAAQ,IAAKC,MAAM,GAAI,IAAGA,MAAO,EAAd,GAAkB,EAA7B,CAApB;AACA,QAAI2E,UAAU,GAAGhC,MAAM,CAACC,MAAP,CACfhC,MADe,EAEfZ,MAAM,GAAG;AAAC,iBAAW;AAAZ,KAAH,GAAwB,EAFf,CAAjB;AAKA,QAAKC,SAAL,EACE0E,UAAU,GAAGhC,MAAM,CAACC,MAAP,CAAc+B,UAAd,EAA0B;AAACpC,MAAAA,IAAI,EAAEd;AAAP,KAA1B,CAAb;AAEF,QAAKvB,WAAL,EACEyE,UAAU,GAAGhC,MAAM,CAACC,MAAP,CAAc+B,UAAd,EAA0BzE,WAA1B,CAAb,CAhBsB,CAkBxB;;AACAmD,IAAAA,aAAa,GAnBW,CAqBxB;;AACA5D,IAAAA,WAAW,CAACiF,GAAD,EAAM,MAAN,EAAcC,UAAd,CAAX,CACG3C,IADH,CACQQ,QAAQ,IAAI;AAEhBhB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AAEAwB,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBT,QAAxB;AAEA,YAAMC,IAAI,GAAGD,QAAQ,CAACC,IAAtB,CANgB,CAQhB;;AACA,UAAKA,IAAI,CAAC/B,cAAL,CAAoB,OAApB,CAAL,EAAoC;AAClCU,QAAAA,YAAY,CACVqB,IAAI,CAACU,KADK,CAAZ;AAGA,eAAO,KAAP;AACD,OAde,CAgBhB;;;AACA,UAAKV,IAAI,CAAC/B,cAAL,CAAoB,UAApB,CAAL,EAAuC;AACrCU,QAAAA,YAAY,CACV,qCAAqCqB,IAAI,CAACmC,QAAL,CAAcC,IAAd,CAAmB,IAAnB,CAD3B,CAAZ;AAGA,eAAO,KAAP;AACD,OAtBe,CAwBhB;AACA;;;AACA,UAAK,CAAC7E,MAAN,EAAe;AACXgD,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BjD,MAA1B;;AACF,YAAK,CAACyC,IAAI,CAAC/B,cAAL,CAAoB,IAApB,CAAN,EAAkC;AAChC,iBAAOU,YAAY,CAAC,4BAAD,CAAnB;AACD;;AACD,cAAM0D,QAAQ,GAAGrB,gBAAgB,CAAChB,IAAI,CAACsC,EAAN,CAAjC;AACAhD,QAAAA,WAAW,CAAC+C,QAAD,CAAX;AACD,OAPD,CAQA;AARA,WASK;AACH,cAAKrC,IAAI,CAAC/B,cAAL,CAAoB,SAApB,CAAL,EACEY,cAAc,CAACmB,IAAI,CAACuC,OAAN,CAAd;AACH;AACF,KAxCH,EAyCE;AAzCF,KA0CG9B,KA1CH,CA0CSC,KAAK,IAAI;AACZH,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BE,KAA3B;AACF3B,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAJ,MAAAA,YAAY,CAAC+B,KAAK,CAACC,QAAN,EAAD,CAAZ;AACD,KA9CH;AA+CD,GArED,CA9J6F,CAsO7F;;;AACA,QAAM6B,UAAU,GAAG9E,MAAM,CAAC+E,GAAP,CAAY,CAAC/C,KAAD,EAAQY,GAAR,KAAgB;AAE7C,YAAQZ,KAAK,CAACE,IAAd;AAEE;AACA,WAAK,UAAL;AACE,eACE,oBAAC,YAAD;AACE,UAAA,GAAG,EAAEU,GADP;AAEE,UAAA,IAAI,EAAEZ,KAAK,CAAC1B,IAFd;AAGE,UAAA,KAAK,EAAE0B,KAAK,CAACgD,KAHf;AAIE,UAAA,KAAK,EAAEvE,MAAM,CAACuB,KAAK,CAAC1B,IAAP,CAJf;AAKE,UAAA,QAAQ,EAAEwD,iBALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAUF;;AACA,WAAK,QAAL;AACE,eACE,oBAAC,UAAD;AACE,UAAA,GAAG,EAAElB,GADP;AAEE,UAAA,IAAI,EAAEZ,KAAK,CAAC1B,IAFd;AAGE,UAAA,KAAK,EAAE0B,KAAK,CAACgD,KAHf;AAIE,UAAA,KAAK,EAAEvE,MAAM,CAACuB,KAAK,CAAC1B,IAAP,CAJf;AAKE,UAAA,QAAQ,EAAE2D,kBALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAUF;;AACA,WAAK,UAAL;AACE,eACE,oBAAC,YAAD;AACE,UAAA,GAAG,EAAErB,GADP;AAEE,UAAA,IAAI,EAAEZ,KAAK,CAAC1B,IAFd;AAGE,UAAA,KAAK,EAAE0B,KAAK,CAACgD,KAHf;AAIE,UAAA,KAAK,EAAEvE,MAAM,CAACuB,KAAK,CAAC1B,IAAP,CAJf;AAKE,UAAA,QAAQ,EAAE4D,oBALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAUF;;AACA,WAAK,QAAL;AACE,eACE,oBAAC,UAAD;AACE,UAAA,GAAG,EAAEtB,GADP;AAEE,UAAA,IAAI,EAAEZ,KAAK,CAAC1B,IAFd;AAGE,UAAA,KAAK,EAAE0B,KAAK,CAACgD,KAHf;AAIE,UAAA,KAAK,EAAEvE,MAAM,CAACuB,KAAK,CAAC1B,IAAP,CAJf;AAKE,UAAA,QAAQ,EAAEwD,iBALZ;AAME,UAAA,QAAQ,EAAE9B,KAAK,CAACxB,QANlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWF;;AACA,WAAK,QAAL;AACE,eACE,oBAAC,UAAD;AACE,UAAA,GAAG,EAAEoC,GADP;AAEE,UAAA,IAAI,EAAEZ,KAAK,CAAC1B,IAFd;AAGE,UAAA,KAAK,EAAEG,MAAM,CAACuB,KAAK,CAAC1B,IAAP,CAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQF;;AACA,WAAK,OAAL;AACE,eACE,oBAAC,SAAD;AACE,UAAA,GAAG,EAAEsC,GADP;AAEE,UAAA,IAAI,EAAEZ,KAAK,CAAC1B,IAFd;AAGE,UAAA,KAAK,EAAEG,MAAM,CAACuB,KAAK,CAAC1B,IAAP,CAHf;AAIE,UAAA,SAAS,EAAEG,MAAM,CAAC,KAAD,CAJnB;AAKE,UAAA,IAAI,EAAC,SALP;AAME,UAAA,QAAQ,EAAEmD,cANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;;AAWF,WAAK,MAAL;AACE;AAEF;;AACA;AACE,eACE,oBAAC,SAAD;AACE,UAAA,GAAG,EAAEhB,GADP;AAEE,UAAA,IAAI,EAAEZ,KAAK,CAAC1B,IAFd;AAGE,UAAA,KAAK,EAAE0B,KAAK,CAACgD,KAHf;AAIE,UAAA,KAAK,EAAEvE,MAAM,CAACuB,KAAK,CAAC1B,IAAP,CAJf;AAKE,UAAA,QAAQ,EAAEwD,iBALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA/EJ;AA4FD,GA9FkB,CAAnB,CAvO6F,CAyU7F;;AACA,QAAMmB,YAAY,GAAG,MAAM;AACzB,UAAMjC,KAAK,GAAIhC,SAAD,GAAe,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAaA,SAAb,CAAf,GAAuD,IAArE;AACA,UAAMkE,OAAO,GAAIhE,WAAD,GAAiB,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAeA,WAAf,CAAjB,GAA+D,IAA/E;AACA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG8B,KADH,EAEGkC,OAFH,CADF;AAMD,GATD;;AAYA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG7B,cADH,EAEE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGG4B,YAAY,EAHf,EAIE;AAAM,IAAA,MAAM,EAAC,OAAb;AAAqB,IAAA,QAAQ,EAAEZ,YAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACIvE,SAAD,GACE,oBAAC,cAAD;AAAgB,IAAA,YAAY,EAAEmB,YAA9B;AAA4C,IAAA,eAAe,EAAEK,QAA7D;AAAuE,IAAA,cAAc,EAAE6B,YAAvF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,GAEC,IAHJ,EAKG2B,UALH,EAMGG,YAAY,EANf,EAOE,oBAAC,UAAD;AAAY,IAAA,KAAK,EAAC,wDAAlB;AAA8B,IAAA,SAAS,EAAE7D,SAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,CAJF,CADF;AAiBD,CAvWD;;AAyWA,eAAe1B,QAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport FormInput from './FormInput';\nimport FormTextarea from './FormTextarea';\nimport FormEditor from './FormEditor';\nimport FormCheckbox from './FormCheckbox';\nimport FormSelect from './FormSelect';\nimport FormHidden from './FormHidden';\nimport FormImage from './FormImage';\nimport ButtonSave from './ButtonSave';\nimport LanguagePicker from './LanguagePicker';\nimport ErrorBlock from '../ErrorBlock';\nimport MessageBlock from '../MessageBlock';\nimport BackButton from '../includes/BackButton';\nimport {sendRequest} from \"../../helpers/client-server\";\nimport { Redirect } from 'react-router-dom'\nimport {getFieldType} from '../../helpers/forms';\nimport {adminUrl} from \"../../config\";\n\nconst FormEdit = ({fieldsToShow, itemType, itemId=null, multilang=false, extraParams=null}) => {\n\n  const [fields, setFields] = useState(fieldsToShow);\n\n  const initValues = fieldsToShow.reduce((obj, item) => {\n    obj[item.name] = (item.hasOwnProperty(\"variants\")) ? item.variants[0].name : \"\";\n    return obj;\n  }, {});\n\n  // input values\n  const [values, setValues] = useState( initValues );\n\n  // changed fields\n  const [changedFields, setChangedFields] = useState({ changed: {}, initial: {}, isLoaded: false });\n\n  // errors\n  const [errorText, setErrorText] = useState(null);\n  const [messageText, setMessageText] = useState(null);\n\n  // loading\n  const [isLoading, setIsLoading] = useState(false);\n\n  // language\n  const [language, setLanguage] = useState(\n    window.localStorage.getItem(\"picked_lang\") || \"en\"\n  );\n\n  // redirect\n  const [redirect, setRedirect] = useState(null);\n\n\n  // get field type if exists\n  useEffect(() => {\n    if ( !extraParams || !extraParams.hasOwnProperty('group_id') )\n      return;\n\n    getFieldType(extraParams['group_id'])\n    .then(fieldType => {\n\n      if ( !fieldType )\n        return;\n\n      setFields(fields => {\n        return fields.reduce( (acc, field) => {\n          let addingField = ( field.name === \"content\" ) ?\n            {...field, type: fieldType} :\n            field;\n          acc.push(addingField);\n          return acc;\n        }, [] );\n      });\n\n    });\n\n  }, []);\n\n\n  // get initial data from server\n  useEffect(() => {\n\n    if ( !itemId )\n      return;\n\n    // loading...\n    setIsLoading(true);\n\n    // make request properties\n\n    // send request\n    sendRequest(`${itemType}/${itemId}?lang=${language}`, 'get', {lang: language})\n      .then(response => {\n\n        // if object not found\n        if ( !response.data.item ) {\n          setErrorText(`Object with ID ${itemId} was not found`);\n          return;\n        }\n\n        // merge field properties\n        const item = response.data.item;\n        let newValues = Object.assign({}, initValues);\n        Object.keys(item).forEach(key => {\n          if ( !newValues.hasOwnProperty(key) || !item[key] )\n            return;\n          newValues[key] = item[key];\n        });\n\n        // update form fields\n        setValues(newValues);\n        setIsLoading(false);\n\n        console.log(response);\n\n      })\n      // error\n      .catch(error => {\n        setIsLoading(false);\n        setErrorText(error.toString());\n      });\n\n\n\n  }, [language]);\n\n\n  const resetMessages = () => {\n    setMessageText(null);\n    setErrorText(null);\n  };\n\n\n  const pickLanguage = lang => {\n    setLanguage(lang);\n    window.localStorage.setItem(\"picked_lang\", lang);\n  };\n\n\n  // make a redirect\n  const renderRedirect = redirect ?\n    (<Redirect to={redirect} />) :\n    null;\n\n  // build a link to \"Edit\" page\n  const generateEditLink = itemId => {\n    const urlPart = window.location.href.split(adminUrl);\n    return adminUrl + urlPart[1].replace('/create/', '/'+itemId+'/edit/');\n  };\n\n\n  const simplySetValue = (name, value) => {\n    return setValues({\n      ...values,\n      [name]: value\n    });\n  };\n\n  // on inputs change\n  const handleInputChange = e => {\n    const target = e.target;\n    simplySetValue(target.name, target.value);\n  };\n\n  // on editor change\n  const handleEditorChange = (name, value) => {\n    if ( isLoading )\n      return;\n    simplySetValue(name, value);\n  };\n\n  // on checkbox change\n  const handleCheckboxChange = e => {\n    const target = e.target;\n    const checked = Number(target.checked);\n    simplySetValue(target.name, checked);\n  };\n\n\n  // on save/update\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    setIsLoading(true);\n\n    // prepare data\n    const url = itemType + ( itemId ? `/${itemId}` : '' );\n    let dataToSend = Object.assign(\n      values,\n      itemId ? {'_method': 'PUT'} : {}\n    );\n\n    if ( multilang )\n      dataToSend = Object.assign(dataToSend, {lang: language});\n\n    if ( extraParams )\n      dataToSend = Object.assign(dataToSend, extraParams);\n\n    // reset messages\n    resetMessages();\n\n    // send to a server\n    sendRequest(url, \"post\", dataToSend)\n      .then(response => {\n\n        setIsLoading(false);\n\n        console.log('response', response);\n\n        const data = response.data;\n\n        // if some required fields are empty\n        if ( data.hasOwnProperty(\"error\") ) {\n          setErrorText(\n            data.error\n          );\n          return false;\n        }\n\n        // if some required fields are empty\n        if ( data.hasOwnProperty(\"required\") ) {\n          setErrorText(\n            \"Обязательные поля не заполнены: \" + data.required.join(', ')\n          );\n          return false;\n        }\n\n        // if it's okay\n        // on save new item\n        if ( !itemId ) {\n            console.log('new itemId', itemId);\n          if ( !data.hasOwnProperty(\"id\") ) {\n            return setErrorText(\"Не удалось создать элемент\");\n          }\n          const editLink = generateEditLink(data.id);\n          setRedirect(editLink);\n        }\n        // on update existing\n        else {\n          if ( data.hasOwnProperty(\"success\") )\n            setMessageText(data.success);\n        }\n      })\n      // request error\n      .catch(error => {\n          console.log('catch error', error);\n        setIsLoading(false);\n        setErrorText(error.toString());\n      });\n  };\n\n\n  // build form fields from list\n  const formFields = fields.map( (field, key) => {\n\n    switch (field.type) {\n\n      // <textarea>\n      case \"textarea\":\n        return (\n          <FormTextarea\n            key={key}\n            name={field.name}\n            label={field.title}\n            value={values[field.name]}\n            setValue={handleInputChange}\n          />\n        );\n\n      // WYSIWYG\n      case \"editor\":\n        return (\n          <FormEditor\n            key={key}\n            name={field.name}\n            label={field.title}\n            value={values[field.name]}\n            setValue={handleEditorChange}\n          />\n        );\n\n      // <input type=\"checkbox\">\n      case \"checkbox\":\n        return (\n          <FormCheckbox\n            key={key}\n            name={field.name}\n            label={field.title}\n            value={values[field.name]}\n            setValue={handleCheckboxChange}\n          />\n        );\n\n      // <select>\n      case \"select\":\n        return (\n          <FormSelect\n            key={key}\n            name={field.name}\n            label={field.title}\n            value={values[field.name]}\n            setValue={handleInputChange}\n            variants={field.variants}\n          />\n        );\n\n      // input[type=\"hidden\"]\n      case \"hidden\":\n        return (\n          <FormHidden\n            key={key}\n            name={field.name}\n            value={values[field.name]}\n          />\n        );\n\n      // image uploader\n      case \"image\":\n        return (\n          <FormImage\n            key={key}\n            name={field.name}\n            value={values[field.name]}\n            initImage={values[\"img\"]}\n            size=\"197x116\"\n            setValue={simplySetValue}\n          />\n        );\n\n      case \"none\":\n        break;\n\n      // input[type=\"text\"]\n      default:\n        return (\n          <FormInput\n            key={key}\n            name={field.name}\n            label={field.title}\n            value={values[field.name]}\n            setValue={handleInputChange}\n          />\n        );\n\n    }\n\n\n  } );\n\n\n\n  // if messages show message block\n  const messageBlock = () => {\n    const error = (errorText) ? (<ErrorBlock>{errorText}</ErrorBlock>) : null;\n    const message = (messageText) ? (<MessageBlock>{messageText}</MessageBlock>) : null;\n    return (\n      <div>\n        {error}\n        {message}\n      </div>\n    );\n  };\n\n\n  return (\n    <div>\n      {renderRedirect}\n      <BackButton/>\n      {messageBlock()}\n      <form action=\"/bnd/\" onSubmit={handleSubmit}>\n        {(multilang) ?\n          (<LanguagePicker setErrorText={setErrorText} currentLanguage={language} languageUpdate={pickLanguage} />) :\n          null\n        }\n        {formFields}\n        {messageBlock()}\n        <ButtonSave label=\"Сохранить\" isLoading={isLoading} />\n      </form>\n    </div>\n  );\n\n};\n\nexport default FormEdit;\n"]},"metadata":{},"sourceType":"module"}