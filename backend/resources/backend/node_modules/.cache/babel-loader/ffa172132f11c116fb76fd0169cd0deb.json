{"ast":null,"code":"var _jsxFileName = \"/var/www/1001guide.net/backend/resources/backend/src/components/templates/Form.js\";\nimport React, { useState, useEffect } from 'react';\nimport FormInput from \"../forms/FormInput\";\n\nconst Form = ({\n  values,\n  setValues,\n  name,\n  label,\n  type = \"text\"\n}) => {\n  // last frontend ID for generating and keying Input Fields\n  const [lastFrontendId, setLastFrontendId] = useState(values.length);\n  useEffect(() => {\n    // add Input field if there no one yet\n    if (!values.length) addValue();\n  }, []);\n  /**\r\n   * Add new Input Field\r\n   *\r\n   * @param {String} value\r\n   */\n\n  const addValue = (value = \"\") => {\n    setLastFrontendId(lastFrontendId + 1);\n    setValues(...values, {\n      value,\n      frontendId: lastFrontendId,\n      id: null\n    });\n  };\n\n  const updateValue = (frontendId, newValue) => {\n    setValues(values.map(oldValue => {\n      if (oldValue.frontendId !== frontendId) return oldValue;\n      return {\n        value: newValue,\n        id: oldValue.id,\n        frontendId\n      };\n    }));\n  };\n\n  const fields = values.map(valueArray => {\n    const {\n      frontendId,\n      value\n    } = valueArray;\n\n    const handleChange = e => {\n      const {\n        target\n      } = e;\n      updateValue(frontendId, target.value);\n    };\n\n    switch (type) {\n      default:\n        return React.createElement(FormInput, {\n          key: frontendId,\n          name: name + frontendId,\n          label: label,\n          value: value,\n          setValue: handleChange,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60\n          },\n          __self: this\n        });\n    }\n  });\n};\n\nexport default Form;","map":{"version":3,"sources":["/var/www/1001guide.net/backend/resources/backend/src/components/templates/Form.js"],"names":["React","useState","useEffect","FormInput","Form","values","setValues","name","label","type","lastFrontendId","setLastFrontendId","length","addValue","value","frontendId","id","updateValue","newValue","map","oldValue","fields","valueArray","handleChange","e","target"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,SAAP,MAAsB,oBAAtB;;AAGA,MAAMC,IAAI,GAAG,CAAC;AAACC,EAAAA,MAAD;AAASC,EAAAA,SAAT;AAAoBC,EAAAA,IAApB;AAA0BC,EAAAA,KAA1B;AAAiCC,EAAAA,IAAI,GAAC;AAAtC,CAAD,KAAmD;AAE9D;AACA,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCV,QAAQ,CAACI,MAAM,CAACO,MAAR,CAApD;AAEAV,EAAAA,SAAS,CAAC,MAAK;AAEb;AACA,QAAK,CAACG,MAAM,CAACO,MAAb,EACEC,QAAQ;AAEX,GANQ,EAMN,EANM,CAAT;AASA;;;;;;AAKA,QAAMA,QAAQ,GAAG,CAACC,KAAK,GAAC,EAAP,KAAc;AAC7BH,IAAAA,iBAAiB,CAACD,cAAc,GAAC,CAAhB,CAAjB;AACAJ,IAAAA,SAAS,CAAC,GAAGD,MAAJ,EAAY;AACnBS,MAAAA,KADmB;AAEnBC,MAAAA,UAAU,EAAEL,cAFO;AAGnBM,MAAAA,EAAE,EAAE;AAHe,KAAZ,CAAT;AAKD,GAPD;;AAUA,QAAMC,WAAW,GAAG,CAACF,UAAD,EAAaG,QAAb,KAA0B;AAC5CZ,IAAAA,SAAS,CACPD,MAAM,CAACc,GAAP,CAAWC,QAAQ,IAAI;AACrB,UAAKA,QAAQ,CAACL,UAAT,KAAwBA,UAA7B,EACE,OAAOK,QAAP;AACF,aAAO;AACLN,QAAAA,KAAK,EAAEI,QADF;AAELF,QAAAA,EAAE,EAAEI,QAAQ,CAACJ,EAFR;AAGLD,QAAAA;AAHK,OAAP;AAKD,KARD,CADO,CAAT;AAWD,GAZD;;AAeA,QAAMM,MAAM,GAAGhB,MAAM,CAACc,GAAP,CAAWG,UAAU,IAAI;AACtC,UAAM;AAACP,MAAAA,UAAD;AAAaD,MAAAA;AAAb,QAAsBQ,UAA5B;;AAEA,UAAMC,YAAY,GAAGC,CAAC,IAAI;AACxB,YAAM;AAACC,QAAAA;AAAD,UAAWD,CAAjB;AACAP,MAAAA,WAAW,CAACF,UAAD,EAAaU,MAAM,CAACX,KAApB,CAAX;AACD,KAHD;;AAKA,YAAQL,IAAR;AACE;AACE,eACE,oBAAC,SAAD;AACE,UAAA,GAAG,EAAEM,UADP;AAEE,UAAA,IAAI,EAAER,IAAI,GAACQ,UAFb;AAGE,UAAA,KAAK,EAAEP,KAHT;AAIE,UAAA,KAAK,EAAEM,KAJT;AAKE,UAAA,QAAQ,EAAES,YALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAFJ;AAYD,GApBc,CAAf;AAwBD,CApED;;AAuEA,eAAenB,IAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport FormInput from \"../forms/FormInput\";\r\n\r\n\r\nconst Form = ({values, setValues, name, label, type=\"text\"}) => {\r\n\r\n  // last frontend ID for generating and keying Input Fields\r\n  const [lastFrontendId, setLastFrontendId] = useState(values.length);\r\n\r\n  useEffect(()=> {\r\n\r\n    // add Input field if there no one yet\r\n    if ( !values.length )\r\n      addValue();\r\n\r\n  }, []);\r\n\r\n\r\n  /**\r\n   * Add new Input Field\r\n   *\r\n   * @param {String} value\r\n   */\r\n  const addValue = (value=\"\") => {\r\n    setLastFrontendId(lastFrontendId+1);\r\n    setValues(...values, {\r\n      value,\r\n      frontendId: lastFrontendId,\r\n      id: null\r\n    });\r\n  };\r\n\r\n\r\n  const updateValue = (frontendId, newValue) => {\r\n    setValues(\r\n      values.map(oldValue => {\r\n        if ( oldValue.frontendId !== frontendId )\r\n          return oldValue;\r\n        return {\r\n          value: newValue,\r\n          id: oldValue.id,\r\n          frontendId\r\n        };\r\n      })\r\n    )\r\n  };\r\n\r\n\r\n  const fields = values.map(valueArray => {\r\n    const {frontendId, value} = valueArray;\r\n\r\n    const handleChange = e => {\r\n      const {target} = e;\r\n      updateValue(frontendId, target.value);\r\n    };\r\n\r\n    switch (type) {\r\n      default:\r\n        return (\r\n          <FormInput\r\n            key={frontendId}\r\n            name={name+frontendId}\r\n            label={label}\r\n            value={value}\r\n            setValue={handleChange}\r\n          />\r\n        );\r\n    }\r\n  });\r\n\r\n\r\n\r\n};\r\n\r\n\r\nexport default Form;"]},"metadata":{},"sourceType":"module"}