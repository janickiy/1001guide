{"ast":null,"code":"var _jsxFileName = \"/var/www/1001guide.net/backend/resources/backend/src/components/poi/Poi.js\";\nimport React, { useState, useEffect } from 'react';\nimport ItemList from '../ItemList';\nimport ButtonAdd from \"../tables/ButtonAdd\";\nimport FormSelect from \"../forms/FormSelect\";\nimport { sendRequest } from \"../../helpers/client-server\";\n\nconst Poi = ({\n  match\n}) => {\n  // countries\n  const [countries, setCountries] = useState([{\n    name: \"all\",\n    value: \"Все страны\"\n  }]);\n  const [chosenCountry, setChosenCountry] = useState(\"all\"); // cities\n\n  const initialCities = [{\n    name: \"all\",\n    value: \"Все города\"\n  }];\n  const [cities, setCities] = useState(initialCities);\n  const [chosenCity, setChosenCity] = useState(\"all\"); // load initial data\n\n  useEffect(() => {\n    loadCountries();\n  }, []); // load city list when country change\n\n  useEffect(() => {\n    loadCities();\n  }, [chosenCountry]);\n  /**\r\n   * Load Country list\r\n   *\r\n   * @return {Promise<void>}\r\n   */\n\n  const loadCountries = async () => {\n    const response = await sendRequest(\"countries?order=name\");\n    if (!response.data.items) return;\n    const countryList = response.data.items.map(country => {\n      return {\n        name: country.country_code,\n        value: country.name\n      };\n    });\n    setCountries([...countries, ...countryList]);\n  };\n  /**\r\n   * Reset city list\r\n   */\n\n\n  const resetCityList = () => {\n    setCities(initialCities);\n    setChosenCity('all');\n  };\n  /**\r\n   * Load City list\r\n   *\r\n   * @return {Promise<void>}\r\n   */\n\n\n  const loadCities = async () => {\n    // empty <select> if country wasn't chosen\n    if (chosenCountry === 'all') {\n      resetCityList();\n      return;\n    } // get list of cities\n\n\n    const response = await sendRequest(`locations/all?country=${chosenCountry}`); // empty <select> if there's no cities\n\n    if (!response.data.items) {\n      resetCityList();\n      return;\n    } // fill teh <select>\n\n\n    const cityList = response.data.items.map(city => {\n      return {\n        name: city.api_id,\n        value: city.name\n      };\n    });\n    setCities([...initialCities, ...cityList]);\n  };\n\n  const handleCountryChange = e => {\n    setChosenCountry(e.target.value);\n  };\n\n  const handleCityChange = e => {\n    setChosenCity(e.target.value);\n  }; // display\n\n\n  return React.createElement(\"div\", {\n    \"data-country\": chosenCountry,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"row mb-5\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"col-sm-4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, React.createElement(FormSelect, {\n    name: \"country\",\n    label: \"\\u0421\\u0442\\u0440\\u0430\\u043D\\u0430\",\n    value: chosenCountry,\n    setValue: handleCountryChange,\n    variants: countries,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"col-sm-4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, React.createElement(FormSelect, {\n    name: \"city\",\n    label: \"\\u0413\\u043E\\u0440\\u043E\\u0434\",\n    value: chosenCity,\n    setValue: handleCityChange,\n    variants: cities,\n    disabled: chosenCountry === 'all',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }))), React.createElement(ItemList, {\n    tableData: [\"name\", \"country_code\", \"total_tours\"],\n    columnWithLink: 0,\n    actions: [\"edit\"],\n    type: `poi/`,\n    multilang: true,\n    paginationEnabled: true,\n    requestMethod: \"post\",\n    extraParams: {\n      country: chosenCountry,\n      city: chosenCity\n    },\n    key: chosenCity === 'all' ? chosenCountry : chosenCity,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }));\n};\n\nexport default Poi;","map":{"version":3,"sources":["/var/www/1001guide.net/backend/resources/backend/src/components/poi/Poi.js"],"names":["React","useState","useEffect","ItemList","ButtonAdd","FormSelect","sendRequest","Poi","match","countries","setCountries","name","value","chosenCountry","setChosenCountry","initialCities","cities","setCities","chosenCity","setChosenCity","loadCountries","loadCities","response","data","items","countryList","map","country","country_code","resetCityList","cityList","city","api_id","handleCountryChange","e","target","handleCityChange"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AACA,OAAOC,UAAP,MAAuB,qBAAvB;AACA,SAAQC,WAAR,QAA0B,6BAA1B;;AAEA,MAAMC,GAAG,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAa;AAEvB;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,CAAC;AAC1CU,IAAAA,IAAI,EAAE,KADoC;AAE1CC,IAAAA,KAAK,EAAE;AAFmC,GAAD,CAAD,CAA1C;AAIA,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCb,QAAQ,CAAC,KAAD,CAAlD,CAPuB,CASvB;;AACA,QAAMc,aAAa,GAAG,CAAC;AACrBJ,IAAAA,IAAI,EAAE,KADe;AAErBC,IAAAA,KAAK,EAAE;AAFc,GAAD,CAAtB;AAIA,QAAM,CAACI,MAAD,EAASC,SAAT,IAAsBhB,QAAQ,CAACc,aAAD,CAApC;AACA,QAAM,CAACG,UAAD,EAAaC,aAAb,IAA8BlB,QAAQ,CAAC,KAAD,CAA5C,CAfuB,CAkBvB;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACdkB,IAAAA,aAAa;AACd,GAFQ,EAEN,EAFM,CAAT,CAnBuB,CAuBvB;;AACAlB,EAAAA,SAAS,CAAC,MAAM;AACdmB,IAAAA,UAAU;AACX,GAFQ,EAEN,CAACR,aAAD,CAFM,CAAT;AAMA;;;;;;AAKA,QAAMO,aAAa,GAAG,YAAY;AAChC,UAAME,QAAQ,GAAG,MAAMhB,WAAW,CAAC,sBAAD,CAAlC;AACA,QAAK,CAACgB,QAAQ,CAACC,IAAT,CAAcC,KAApB,EAA4B;AAC5B,UAAMC,WAAW,GAAGH,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBE,GAApB,CAAwBC,OAAO,IAAI;AACrD,aAAO;AACLhB,QAAAA,IAAI,EAAEgB,OAAO,CAACC,YADT;AAELhB,QAAAA,KAAK,EAAEe,OAAO,CAAChB;AAFV,OAAP;AAID,KALmB,CAApB;AAMAD,IAAAA,YAAY,CAAC,CAAC,GAAGD,SAAJ,EAAe,GAAGgB,WAAlB,CAAD,CAAZ;AACD,GAVD;AAaA;;;;;AAGA,QAAMI,aAAa,GAAG,MAAM;AAC1BZ,IAAAA,SAAS,CAACF,aAAD,CAAT;AACAI,IAAAA,aAAa,CAAC,KAAD,CAAb;AACD,GAHD;AAOA;;;;;;;AAKA,QAAME,UAAU,GAAG,YAAY;AAC7B;AACA,QAAKR,aAAa,KAAK,KAAvB,EAA+B;AAC7BgB,MAAAA,aAAa;AACb;AACD,KAL4B,CAO7B;;;AACA,UAAMP,QAAQ,GAAG,MAAMhB,WAAW,CAAE,yBAAwBO,aAAc,EAAxC,CAAlC,CAR6B,CAU7B;;AACA,QAAK,CAACS,QAAQ,CAACC,IAAT,CAAcC,KAApB,EAA6B;AAC3BK,MAAAA,aAAa;AACb;AACD,KAd4B,CAgB7B;;;AACA,UAAMC,QAAQ,GAAGR,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBE,GAApB,CAAwBK,IAAI,IAAI;AAC/C,aAAO;AACLpB,QAAAA,IAAI,EAAEoB,IAAI,CAACC,MADN;AAELpB,QAAAA,KAAK,EAAEmB,IAAI,CAACpB;AAFP,OAAP;AAID,KALgB,CAAjB;AAMAM,IAAAA,SAAS,CAAC,CAAC,GAAGF,aAAJ,EAAmB,GAAGe,QAAtB,CAAD,CAAT;AACD,GAxBD;;AA2BA,QAAMG,mBAAmB,GAAGC,CAAC,IAAI;AAC/BpB,IAAAA,gBAAgB,CAACoB,CAAC,CAACC,MAAF,CAASvB,KAAV,CAAhB;AACD,GAFD;;AAKA,QAAMwB,gBAAgB,GAAGF,CAAC,IAAI;AAC5Bf,IAAAA,aAAa,CAACe,CAAC,CAACC,MAAF,CAASvB,KAAV,CAAb;AACD,GAFD,CA/FuB,CAoGvB;;;AACA,SACE;AAAK,oBAAcC,aAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AACE,IAAA,IAAI,EAAC,SADP;AAEE,IAAA,KAAK,EAAC,sCAFR;AAGE,IAAA,KAAK,EAAEA,aAHT;AAIE,IAAA,QAAQ,EAAEoB,mBAJZ;AAKE,IAAA,QAAQ,EAAExB,SALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,EAUE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,KAAK,EAAC,gCAFR;AAGE,IAAA,KAAK,EAAES,UAHT;AAIE,IAAA,QAAQ,EAAEkB,gBAJZ;AAKE,IAAA,QAAQ,EAAEpB,MALZ;AAME,IAAA,QAAQ,EAAEH,aAAa,KAAK,KAN9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAVF,CAFF,EAwBE,oBAAC,QAAD;AACE,IAAA,SAAS,EAAE,CAAC,MAAD,EAAS,cAAT,EAAyB,aAAzB,CADb;AAEE,IAAA,cAAc,EAAE,CAFlB;AAGE,IAAA,OAAO,EAAE,CAAC,MAAD,CAHX;AAIE,IAAA,IAAI,EAAG,MAJT;AAKE,IAAA,SAAS,EAAE,IALb;AAME,IAAA,iBAAiB,EAAE,IANrB;AAOE,IAAA,aAAa,EAAC,MAPhB;AAQE,IAAA,WAAW,EAAE;AACXc,MAAAA,OAAO,EAAEd,aADE;AAEXkB,MAAAA,IAAI,EAAEb;AAFK,KARf;AAYE,IAAA,GAAG,EACDA,UAAU,KAAK,KAAf,GACEL,aADF,GAEEK,UAfN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAxBF,CADF;AA6CD,CAlJD;;AAoJA,eAAeX,GAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport ItemList from '../ItemList';\r\nimport ButtonAdd from \"../tables/ButtonAdd\";\r\nimport FormSelect from \"../forms/FormSelect\";\r\nimport {sendRequest} from \"../../helpers/client-server\";\r\n\r\nconst Poi = ({match}) => {\r\n\r\n  // countries\r\n  const [countries, setCountries] = useState([{\r\n    name: \"all\",\r\n    value: \"Все страны\"\r\n  }]);\r\n  const [chosenCountry, setChosenCountry] = useState(\"all\");\r\n\r\n  // cities\r\n  const initialCities = [{\r\n    name: \"all\",\r\n    value: \"Все города\"\r\n  }];\r\n  const [cities, setCities] = useState(initialCities);\r\n  const [chosenCity, setChosenCity] = useState(\"all\");\r\n\r\n\r\n  // load initial data\r\n  useEffect(() => {\r\n    loadCountries();\r\n  }, []);\r\n\r\n  // load city list when country change\r\n  useEffect(() => {\r\n    loadCities();\r\n  }, [chosenCountry]);\r\n\r\n\r\n\r\n  /**\r\n   * Load Country list\r\n   *\r\n   * @return {Promise<void>}\r\n   */\r\n  const loadCountries = async () => {\r\n    const response = await sendRequest(\"countries?order=name\");\r\n    if ( !response.data.items ) return;\r\n    const countryList = response.data.items.map(country => {\r\n      return {\r\n        name: country.country_code,\r\n        value: country.name\r\n      }\r\n    });\r\n    setCountries([...countries, ...countryList]);\r\n  };\r\n\r\n\r\n  /**\r\n   * Reset city list\r\n   */\r\n  const resetCityList = () => {\r\n    setCities(initialCities);\r\n    setChosenCity('all');\r\n  };\r\n\r\n\r\n\r\n  /**\r\n   * Load City list\r\n   *\r\n   * @return {Promise<void>}\r\n   */\r\n  const loadCities = async () => {\r\n    // empty <select> if country wasn't chosen\r\n    if ( chosenCountry === 'all' ) {\r\n      resetCityList();\r\n      return;\r\n    }\r\n\r\n    // get list of cities\r\n    const response = await sendRequest(`locations/all?country=${chosenCountry}`);\r\n\r\n    // empty <select> if there's no cities\r\n    if ( !response.data.items  ) {\r\n      resetCityList();\r\n      return;\r\n    }\r\n\r\n    // fill teh <select>\r\n    const cityList = response.data.items.map(city => {\r\n      return {\r\n        name: city.api_id,\r\n        value: city.name\r\n      }\r\n    });\r\n    setCities([...initialCities, ...cityList]);\r\n  };\r\n\r\n\r\n  const handleCountryChange = e => {\r\n    setChosenCountry(e.target.value);\r\n  };\r\n\r\n\r\n  const handleCityChange = e => {\r\n    setChosenCity(e.target.value);\r\n  };\r\n\r\n\r\n  // display\r\n  return (\r\n    <div data-country={chosenCountry}>\r\n\r\n      <div className=\"row mb-5\">\r\n        <div className=\"col-sm-4\">\r\n          <FormSelect\r\n            name=\"country\"\r\n            label=\"Страна\"\r\n            value={chosenCountry}\r\n            setValue={handleCountryChange}\r\n            variants={countries}\r\n          />\r\n        </div>\r\n        <div className=\"col-sm-4\">\r\n          <FormSelect\r\n            name=\"city\"\r\n            label=\"Город\"\r\n            value={chosenCity}\r\n            setValue={handleCityChange}\r\n            variants={cities}\r\n            disabled={chosenCountry === 'all'}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <ItemList\r\n        tableData={[\"name\", \"country_code\", \"total_tours\"]}\r\n        columnWithLink={0}\r\n        actions={[\"edit\"]}\r\n        type={`poi/`}\r\n        multilang={true}\r\n        paginationEnabled={true}\r\n        requestMethod='post'\r\n        extraParams={{\r\n          country: chosenCountry,\r\n          city: chosenCity\r\n        }}\r\n        key={\r\n          chosenCity === 'all' ?\r\n            chosenCountry :\r\n            chosenCity\r\n        }\r\n      />\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Poi;\r\n\r\n"]},"metadata":{},"sourceType":"module"}