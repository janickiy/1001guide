{"ast":null,"code":"var _jsxFileName = \"/var/www/1001guide.net/backend/resources/backend/src/components/ItemList.js\";\nimport React, { useState, useEffect } from 'react';\nimport Loading from './Loading';\nimport ErrorBlock from './ErrorBlock';\nimport { sendRequest } from '../helpers/client-server';\nimport DataTable from './tables/DataTable';\n\nconst ItemList = ({\n  tableData,\n  columnWithLink,\n  actions,\n  type,\n  groupBy = null,\n  extraParams = null,\n  multilang = false,\n  showTitle = false,\n  paginationEnabled = false,\n  requestMethod = 'get'\n}) => {\n  // set default states\n  const [requestError, setRequestError] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [listItems, setListItems] = useState({});\n  const [language, setLanguage] = useState(window.localStorage.getItem(\"picked_lang\") || \"en\");\n  const [pageTitle, setPageTitle] = useState(null);\n  const [updated, forceUpdate] = useState(); // pagination state\n\n  const [offset, setOffset] = useState(0);\n  const [paginationLoading, setPaginationLoading] = useState(false);\n  const [isPageLast, setIsPageLast] = useState(false); // app DIV\n\n  const appContainer = document.querySelector('.App'); // get data from server\n\n  useEffect(() => {\n    loadData(true);\n  }, [language, type, updated]); // load data on pagination\n\n  useEffect(() => {\n    if (!offset || !paginationEnabled) return; // set loader and prevent double run\n\n    if (paginationLoading) return;\n    setPaginationLoading(true); // bind scroll listener\n\n    setTimeout(() => {\n      if (isPageLast) return;\n      setPaginationLoading(false);\n      appContainer.addEventListener('scroll', handleScroll);\n    }, 1500); // load new items\n\n    loadData(false); // unbind scroll listener on Component close\n\n    return () => {\n      setOffset(0);\n      appContainer.removeEventListener('scroll', handleScroll);\n    };\n  }, [offset]); // first run\n\n  useEffect(() => {\n    // scrolling pagination\n    if (paginationEnabled) {\n      appContainer.addEventListener('scroll', handleScroll);\n      return () => {\n        setOffset(0);\n        appContainer.removeEventListener('scroll', handleScroll);\n      };\n    }\n\n    if (!showTitle) return;\n    sendRequest(type, 'get', Object.assign({\n      action: \"show_title\"\n    }, extraParams)).then(response => {\n      setPageTitle(response.data.title);\n    });\n  }, []);\n  /**\r\n   * Load item list from the Server\r\n   *\r\n   * @param firstLoad\r\n   */\n\n  const loadData = firstLoad => {\n    let dataToSend = {};\n    if (offset) dataToSend.offset = offset;\n    let url = type;\n    if (extraParams) dataToSend = Object.assign(dataToSend, extraParams);\n\n    if (multilang) {\n      url += `?lang=${language}`; // dataToSend = Object.assign( dataToSend, {lang: language} );\n    }\n\n    sendRequest(url, requestMethod, dataToSend).then(response => {\n      console.log(response, dataToSend);\n      setIsLoading(false); // on error\n\n      if (response.data.error) {\n        setRequestError(response.data.error);\n        return false;\n      } // if items did not received\n\n\n      if (!response.data.hasOwnProperty('items')) {\n        setRequestError(\"List items didn't received\");\n        return false;\n      }\n\n      let items = response.data.items; // sorting\n\n      if (groupBy) {\n        items = items.sort((a, b) => {\n          if (a.fragment > b.fragment) return 1;\n          if (a.fragment < b.fragment) return -1;\n          return 0;\n        });\n      } // success\n\n\n      setListItems(firstLoad ? items : [...listItems, ...items]); // mark last page\n\n      if (!items.length) {\n        setIsPageLast(true);\n      }\n\n      return true;\n    }) // request error\n    .catch(error => {\n      setRequestError(error.toString());\n    });\n  };\n  /**\r\n   * Load next page\r\n   */\n\n\n  const loadMore = () => {\n    appContainer.removeEventListener('scroll', handleScroll);\n    const offsetStep = 100;\n    setOffset(offset + offsetStep);\n  };\n  /**\r\n   * Scroll function\r\n   */\n\n\n  const handleScroll = () => {\n    const loadWhenPxRemain = 700;\n    const {\n      scrollTop,\n      scrollHeight\n    } = appContainer;\n\n    if (scrollHeight - scrollTop - window.innerHeight < loadWhenPxRemain) {\n      loadMore();\n    }\n  };\n\n  const pickLanguage = lang => {\n    setLanguage(lang);\n    window.localStorage.setItem(\"picked_lang\", lang);\n  };\n  /**\r\n   * \"Load more\" btn or Loader\r\n   *\r\n   * @return {*}\r\n   * @constructor\r\n   */\n\n\n  const Paginator = () => {\n    if (!paginationEnabled || isLoading || isPageLast) return null;\n    return paginationLoading ? React.createElement(Loading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }) : React.createElement(\"div\", {\n      className: \"text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"btn btn-default\",\n      onClick: loadMore,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, \"\\u041F\\u043E\\u043A\\u0430\\u0437\\u0430\\u0442\\u044C \\u0435\\u0449\\u0451\"));\n  }; // output\n\n\n  let content = null;\n\n  if (isLoading && !requestError) {\n    content = React.createElement(Loading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    });\n  } else {\n    content = React.createElement(DataTable, {\n      tableData: tableData,\n      columnWithLink: columnWithLink,\n      actions: actions,\n      listItems: listItems,\n      setError: setRequestError,\n      setIsLoading: setIsLoading,\n      setListItems: setListItems,\n      type: type,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    });\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231\n    },\n    __self: this\n  }, requestError ? React.createElement(ErrorBlock, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232\n    },\n    __self: this\n  }, requestError) : null, pageTitle ? React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234\n    },\n    __self: this\n  }, pageTitle) : null, content, React.createElement(Paginator, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237\n    },\n    __self: this\n  }));\n};\n\nexport default ItemList;","map":{"version":3,"sources":["/var/www/1001guide.net/backend/resources/backend/src/components/ItemList.js"],"names":["React","useState","useEffect","Loading","ErrorBlock","sendRequest","DataTable","ItemList","tableData","columnWithLink","actions","type","groupBy","extraParams","multilang","showTitle","paginationEnabled","requestMethod","requestError","setRequestError","isLoading","setIsLoading","listItems","setListItems","language","setLanguage","window","localStorage","getItem","pageTitle","setPageTitle","updated","forceUpdate","offset","setOffset","paginationLoading","setPaginationLoading","isPageLast","setIsPageLast","appContainer","document","querySelector","loadData","setTimeout","addEventListener","handleScroll","removeEventListener","Object","assign","action","then","response","data","title","firstLoad","dataToSend","url","console","log","error","hasOwnProperty","items","sort","a","b","fragment","length","catch","toString","loadMore","offsetStep","loadWhenPxRemain","scrollTop","scrollHeight","innerHeight","pickLanguage","lang","setItem","Paginator","content"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Loading from './Loading';\r\nimport ErrorBlock from './ErrorBlock';\r\nimport {sendRequest} from '../helpers/client-server';\r\nimport DataTable from './tables/DataTable';\r\n\r\n\r\nconst ItemList = ({\r\n  tableData, columnWithLink, actions, type, groupBy=null,\r\n  extraParams=null, multilang=false, showTitle=false,\r\n  paginationEnabled=false, requestMethod='get'\r\n}) => {\r\n\r\n  // set default states\r\n  const [requestError, setRequestError] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [listItems, setListItems] = useState({});\r\n  const [language, setLanguage] = useState(\r\n    window.localStorage.getItem(\"picked_lang\") || \"en\"\r\n  );\r\n  const [pageTitle, setPageTitle] = useState(null);\r\n  const [updated, forceUpdate] = useState();\r\n\r\n  // pagination state\r\n  const [offset, setOffset] = useState(0);\r\n  const [paginationLoading, setPaginationLoading] = useState(false);\r\n  const [isPageLast, setIsPageLast] = useState(false);\r\n\r\n\r\n  // app DIV\r\n  const appContainer = document.querySelector('.App');\r\n\r\n\r\n  // get data from server\r\n  useEffect(() => {\r\n    loadData(true);\r\n  }, [language, type, updated]);\r\n\r\n\r\n  // load data on pagination\r\n  useEffect(() => {\r\n    if ( !offset || !paginationEnabled ) return;\r\n\r\n    // set loader and prevent double run\r\n    if ( paginationLoading ) return;\r\n    setPaginationLoading(true);\r\n\r\n    // bind scroll listener\r\n    setTimeout(\r\n      ()=>{\r\n        if ( isPageLast ) return;\r\n        setPaginationLoading(false);\r\n        appContainer.addEventListener('scroll', handleScroll);\r\n      },\r\n      1500\r\n    );\r\n\r\n    // load new items\r\n    loadData(false);\r\n\r\n    // unbind scroll listener on Component close\r\n    return () => {\r\n      setOffset(0);\r\n      appContainer.removeEventListener('scroll', handleScroll);\r\n    };\r\n  }, [offset]);\r\n\r\n\r\n  // first run\r\n  useEffect(() => {\r\n\r\n    // scrolling pagination\r\n    if ( paginationEnabled ) {\r\n      appContainer.addEventListener('scroll', handleScroll);\r\n      return () => {\r\n        setOffset(0);\r\n        appContainer.removeEventListener('scroll', handleScroll);\r\n      };\r\n    }\r\n\r\n    if ( !showTitle ) return;\r\n    sendRequest(type, 'get', Object.assign({\r\n      action: \"show_title\",\r\n    }, extraParams))\r\n    .then(response => {\r\n      setPageTitle(response.data.title);\r\n    });\r\n  }, []);\r\n\r\n\r\n  /**\r\n   * Load item list from the Server\r\n   *\r\n   * @param firstLoad\r\n   */\r\n  const loadData = firstLoad => {\r\n    let dataToSend = {};\r\n    if ( offset )\r\n      dataToSend.offset = offset;\r\n    let url = type;\r\n    if ( extraParams )\r\n      dataToSend = Object.assign( dataToSend, extraParams );\r\n    if ( multilang ) {\r\n      url += `?lang=${language}`;\r\n      // dataToSend = Object.assign( dataToSend, {lang: language} );\r\n    }\r\n\r\n    sendRequest(url, requestMethod, dataToSend)\r\n    .then(response => {\r\n\r\n      console.log(response, dataToSend);\r\n\r\n      setIsLoading(false);\r\n\r\n      // on error\r\n      if ( response.data.error ) {\r\n        setRequestError(response.data.error);\r\n        return false;\r\n      }\r\n\r\n      // if items did not received\r\n      if ( !response.data.hasOwnProperty('items') ) {\r\n        setRequestError(\"List items didn't received\");\r\n        return false;\r\n      }\r\n\r\n      let items = response.data.items;\r\n\r\n      // sorting\r\n      if ( groupBy ) {\r\n        items = items.sort( (a,b) => {\r\n          if ( a.fragment > b.fragment ) return 1;\r\n          if ( a.fragment < b.fragment ) return -1;\r\n          return 0;\r\n        } );\r\n      }\r\n\r\n      // success\r\n      setListItems(\r\n        firstLoad ?\r\n          items :\r\n          [...listItems, ...items]\r\n      );\r\n\r\n      // mark last page\r\n      if ( !items.length ) {\r\n        setIsPageLast(true);\r\n      }\r\n\r\n      return true;\r\n\r\n    })\r\n\r\n    // request error\r\n    .catch(error => {\r\n      setRequestError(error.toString());\r\n    });\r\n  };\r\n\r\n\r\n  /**\r\n   * Load next page\r\n   */\r\n  const loadMore = () => {\r\n    appContainer.removeEventListener('scroll', handleScroll);\r\n    const offsetStep = 100;\r\n    setOffset(offset + offsetStep);\r\n  };\r\n\r\n\r\n  /**\r\n   * Scroll function\r\n   */\r\n  const handleScroll = () => {\r\n    const loadWhenPxRemain = 700;\r\n    const {scrollTop, scrollHeight} = appContainer;\r\n    if ( (scrollHeight - scrollTop - window.innerHeight) < loadWhenPxRemain ) {\r\n      loadMore();\r\n    }\r\n  };\r\n\r\n\r\n  const pickLanguage = lang => {\r\n    setLanguage(lang);\r\n    window.localStorage.setItem(\"picked_lang\", lang);\r\n  };\r\n\r\n\r\n  /**\r\n   * \"Load more\" btn or Loader\r\n   *\r\n   * @return {*}\r\n   * @constructor\r\n   */\r\n  const Paginator = () => {\r\n    if ( !paginationEnabled || isLoading || isPageLast )\r\n      return null;\r\n    return paginationLoading ?\r\n      <Loading /> :\r\n      (\r\n        <div className=\"text-center\">\r\n          <button className=\"btn btn-default\" onClick={loadMore}>Показать ещё</button>\r\n        </div>\r\n      );\r\n  };\r\n\r\n\r\n  // output\r\n  let content = null;\r\n  if ( isLoading && !requestError ) {\r\n    content = (\r\n      <Loading/>\r\n    );\r\n  }\r\n  else {\r\n    content = (\r\n      <DataTable\r\n        tableData={tableData}\r\n        columnWithLink={columnWithLink}\r\n        actions={actions}\r\n        listItems={listItems}\r\n        setError={setRequestError}\r\n        setIsLoading={setIsLoading}\r\n        setListItems={setListItems}\r\n        type={type}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {(requestError) ? (<ErrorBlock>{requestError}</ErrorBlock>) : null}\r\n      {pageTitle ?\r\n        (<h1>{pageTitle}</h1>) : null\r\n      }\r\n      {content}\r\n      <Paginator/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ItemList;"]},"metadata":{},"sourceType":"module"}