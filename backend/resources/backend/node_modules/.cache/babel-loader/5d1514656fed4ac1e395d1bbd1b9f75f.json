{"ast":null,"code":"var _jsxFileName = \"/var/www/1001guide.net/backend/resources/backend/src/components/LocalSettings.js\";\nimport React, { useState, useEffect } from 'react';\nimport Loading from './Loading';\nimport ErrorBlock from './ErrorBlock';\nimport { sendRequest } from '../helpers/client-server';\nimport LanguagePicker from './forms/LanguagePicker';\nimport ButtonSave from './forms/ButtonSave';\nimport MessageBlock from './MessageBlock';\n\nconst LocalSettings = () => {\n  const [values, setValues] = useState({});\n  const [language, setLanguage] = useState(window.localStorage.getItem(\"picked_lang\") || \"en\");\n  const [isLoading, setIsLoading] = useState(true);\n  const [errorText, setErrorText] = useState(false);\n  const [messageText, setMessageText] = useState(null);\n  useEffect(() => {\n    setIsLoading(true); // get settings\n\n    sendRequest(`settings?lang=${language}`, 'get').then(response => {\n      if (!response.data.items) return;\n      const items = response.data.items; // convert items to object\n\n      const loadedValues = Object.keys(items).reduce((obj, key) => {\n        return Object.assign(obj, {\n          [items[key].name]: {\n            value: items[key].value || '',\n            name: items[key].id,\n            title: items[key].title,\n            type: items[key].type\n          }\n        });\n      }, {});\n      setValues(values => {\n        return { ...values,\n          ...loadedValues\n        };\n      });\n      setIsLoading(false);\n    });\n  }, [language]);\n\n  const handleChange = e => {\n    const target = e.target;\n    setValues({ ...values,\n      [target.name]: { ...values[target.name],\n        value: target.value\n      }\n    });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    setIsLoading(true);\n    const dataToSend = {\n      item_type: 'local_settings',\n      lang: language,\n      ...Object.keys(values).reduce((obj, key) => {\n        return Object.assign(obj, {\n          [key]: values[key].value\n        });\n      }, {})\n    };\n    sendRequest('settings', 'post', dataToSend).then(response => {\n      setIsLoading(false);\n      setMessageText(\"Изменения сохранены\");\n    });\n  };\n\n  const pickLanguage = lang => {\n    setLanguage(lang);\n    window.localStorage.setItem(\"picked_lang\", lang);\n  };\n\n  const showInput = fieldName => {\n    const field = values[fieldName];\n\n    switch (field[\"type\"]) {\n      case \"editor\":\n        return React.createElement(\"textarea\", {\n          type: \"text\",\n          className: \"form-control\",\n          name: fieldName,\n          value: field[\"value\"],\n          placeholder: field[\"title\"],\n          onChange: handleChange,\n          onClick: e => {\n            console.log(values);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102\n          },\n          __self: this\n        });\n\n      default:\n        return React.createElement(\"input\", {\n          type: \"text\",\n          className: \"form-control\",\n          name: fieldName,\n          value: field[\"value\"],\n          placeholder: field[\"title\"],\n          onChange: handleChange,\n          onClick: e => {\n            console.log(values);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113\n          },\n          __self: this\n        });\n    }\n  };\n\n  const settingsList = Object.keys(values).map((name, key) => {\n    return React.createElement(\"div\", {\n      className: \"form-group\",\n      key: key,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, values[name][\"title\"]), showInput(name));\n  }); // if messages show message block\n\n  const messageBlock = () => {\n    const error = errorText ? React.createElement(ErrorBlock, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, errorText) : null;\n    const message = messageText ? React.createElement(MessageBlock, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, messageText) : null;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, error, message);\n  };\n\n  return React.createElement(\"div\", {\n    className: \"local-settings\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, React.createElement(LanguagePicker, {\n    setErrorText: setErrorText,\n    currentLanguage: language,\n    languageUpdate: pickLanguage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }), messageBlock(), React.createElement(\"form\", {\n    action: \"\",\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }, settingsList, React.createElement(ButtonSave, {\n    label: \"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C\",\n    isLoading: isLoading,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  })));\n};\n\nexport default LocalSettings;","map":{"version":3,"sources":["/var/www/1001guide.net/backend/resources/backend/src/components/LocalSettings.js"],"names":["React","useState","useEffect","Loading","ErrorBlock","sendRequest","LanguagePicker","ButtonSave","MessageBlock","LocalSettings","values","setValues","language","setLanguage","window","localStorage","getItem","isLoading","setIsLoading","errorText","setErrorText","messageText","setMessageText","then","response","data","items","loadedValues","Object","keys","reduce","obj","key","assign","name","value","id","title","type","handleChange","e","target","handleSubmit","preventDefault","dataToSend","item_type","lang","pickLanguage","setItem","showInput","fieldName","field","console","log","settingsList","map","messageBlock","error","message"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport Loading from './Loading';\r\nimport ErrorBlock from './ErrorBlock';\r\nimport {sendRequest} from '../helpers/client-server';\r\nimport LanguagePicker from './forms/LanguagePicker';\r\nimport ButtonSave from './forms/ButtonSave';\r\nimport MessageBlock from './MessageBlock';\r\n\r\n\r\nconst LocalSettings = () => {\r\n\r\n  const [values, setValues] = useState({});\r\n  const [language, setLanguage] = useState(\r\n    window.localStorage.getItem(\"picked_lang\") || \"en\"\r\n  );\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [errorText, setErrorText] = useState(false);\r\n  const [messageText, setMessageText] = useState(null);\r\n\r\n\r\n  useEffect(() => {\r\n\r\n    setIsLoading(true);\r\n\r\n    // get settings\r\n    sendRequest(`settings?lang=${language}`, 'get')\r\n    .then(response => {\r\n\r\n      if ( !response.data.items ) return;\r\n      const items = response.data.items;\r\n\r\n      // convert items to object\r\n      const loadedValues = Object.keys(items).reduce((obj, key) => {\r\n        return Object.assign(obj, {\r\n          [items[key].name]: {\r\n            value: items[key].value || '',\r\n            name: items[key].id,\r\n            title: items[key].title,\r\n            type: items[key].type\r\n          }\r\n        });\r\n      }, {});\r\n\r\n      setValues(values => {\r\n        return {\r\n          ...values,\r\n          ...loadedValues\r\n        }\r\n      });\r\n\r\n      setIsLoading(false);\r\n\r\n    });\r\n\r\n  }, [language]);\r\n\r\n\r\n  const handleChange = e => {\r\n    const target = e.target;\r\n    setValues({\r\n      ...values,\r\n      [target.name]: {\r\n        ...values[target.name],\r\n        value: target.value\r\n      }\r\n    });\r\n  };\r\n\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    setIsLoading(true);\r\n\r\n    const dataToSend = {\r\n      item_type: 'local_settings',\r\n      lang: language,\r\n      ...Object.keys(values).reduce((obj, key) => {\r\n        return Object.assign(obj, {\r\n          [key]: values[key].value\r\n        });\r\n      }, {})\r\n    };\r\n    sendRequest('settings', 'post', dataToSend)\r\n      .then(response => {\r\n        setIsLoading(false);\r\n        setMessageText(\"Изменения сохранены\");\r\n      });\r\n  };\r\n\r\n\r\n  const pickLanguage = lang => {\r\n    setLanguage(lang);\r\n    window.localStorage.setItem(\"picked_lang\", lang);\r\n  };\r\n\r\n\r\n  const showInput = fieldName => {\r\n    const field = values[fieldName];\r\n    switch (field[\"type\"]) {\r\n      case \"editor\":\r\n        return (\r\n          <textarea\r\n            type=\"text\" className=\"form-control\"\r\n            name={fieldName}\r\n            value={field[\"value\"]}\r\n            placeholder={field[\"title\"]}\r\n            onChange={handleChange}\r\n            onClick={e => {console.log(values)}}\r\n          />\r\n        );\r\n      default:\r\n        return (\r\n          <input\r\n            type=\"text\" className=\"form-control\"\r\n            name={fieldName}\r\n            value={field[\"value\"]}\r\n            placeholder={field[\"title\"]}\r\n            onChange={handleChange}\r\n            onClick={e => {console.log(values)}}\r\n          />\r\n        );\r\n    }\r\n  };\r\n\r\n\r\n  const settingsList = Object.keys(values).map((name, key) => {\r\n    return (\r\n      <div className=\"form-group\" key={key}>\r\n        <label>{values[name][\"title\"]}</label>\r\n        {showInput(name)}\r\n      </div>\r\n    );\r\n  });\r\n\r\n\r\n  // if messages show message block\r\n  const messageBlock = () => {\r\n    const error = (errorText) ? (<ErrorBlock>{errorText}</ErrorBlock>) : null;\r\n    const message = (messageText) ? (<MessageBlock>{messageText}</MessageBlock>) : null;\r\n    return (\r\n      <div>\r\n        {error}\r\n        {message}\r\n      </div>\r\n    );\r\n  };\r\n\r\n\r\n  return (\r\n    <div className=\"local-settings\">\r\n      <LanguagePicker setErrorText={setErrorText} currentLanguage={language} languageUpdate={pickLanguage} />\r\n      {messageBlock()}\r\n      <form action=\"\" onSubmit={handleSubmit}>\r\n        {settingsList}\r\n        <ButtonSave label=\"Сохранить\" isLoading={isLoading} />\r\n      </form>\r\n    </div>\r\n  );\r\n\r\n};\r\n\r\nexport default LocalSettings;"]},"metadata":{},"sourceType":"module"}